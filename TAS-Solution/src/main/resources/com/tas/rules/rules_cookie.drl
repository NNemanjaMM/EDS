//created on: Jun 6, 2017
package com.tas.rules

//list any import classes here.
import com.tas.codes.AssetCode;
import com.tas.codes.VulnerabilityCode;
import com.tas.model.risk_pattern.*;
import com.tas.model.diagram.Process;
import com.tas.model.diagram.Element;
import com.tas.model.diagram.*;
import com.tas.model.diagram.Diagram.Flows.Http;
import com.tas.model.diagram.Diagram.Elements.Browser;
import java.util.List;

//declare any global variables here


rule "Asset:_Session_Cookie"
    when
     	DiagramPattern($list : assets)  
     	$value : AssetDefinition() from $list  
     	Boolean(booleanValue == true) from $value.assetId == AssetCode.SESSION_COOKIE               
    then
        drools.setFocus("sc_check_request");
end

rule "SC_Request:_Check_Confidentiality"
	agenda-group "sc_check_request"
    when
     	 DiagramPattern($list : assets)  
     	$value : AssetDefinition() from $list  
     	Boolean(booleanValue == true) from $value.protectConfidentiality == true  
     then
        drools.setFocus("sc_check_primary");
end

rule "SC_Request:_Check_Availability"
	agenda-group "sc_check_request"
    when
     	DiagramPattern($list : assets)  
     	$value : AssetDefinition() from $list  
     	Boolean(booleanValue == true) from $value.protectAvailability == true  
     then
        drools.setFocus("sc_check_primary");
end

rule "SC_Request:_Check_Integrity"
	agenda-group "sc_check_request"
    when
     	DiagramPattern($list : assets)  
     	$value : AssetDefinition() from $list  
     	Boolean(booleanValue == true) from $value.protectIntegrity == true  
     then
        drools.setFocus("sc_check_primary");
end

/* *************** CHECK VULNERABILITIES ****************/

rule "SC:_Check_Confidentiality"
	agenda-group "sc_check_primary"		// SENSITIVE_DATA_EXPOSURE postoji uvek kada barem jedan element u transportu ne enkriptuje podatke
    when
     	pattern : DiagramPattern($list : assets)  
     	$value : AssetDefinition() from $list  
     	Boolean(booleanValue == true) from $value.protectConfidentiality == true  
     	                 
     	DiagramPattern($list2 : trace)
     	elementInTrace : Element() from $list2
     	DiagramPattern(elementInTrace instanceof Http) 
    then
        pattern.addVulnerability(VulnerabilityCode.SENSITIVE_DATA_EXPOSURE);
end

rule "SC:_Check_Confidentiality_for_Session_Hijack"
	agenda-group "sc_check_primary"		// ako je prenos podataka otvoren, mogu se procitati kredencijali ili cookie, pomocu cega se moze ukrasi sesija
    when									// nije ukljuceno u prethodno pravilo, posto ona zahteva da se stiti confidentality
     	pattern : DiagramPattern($list : trace)
     	elementInTrace : Element() from $list
     	DiagramPattern(elementInTrace instanceof Http) 
    then
        pattern.addVulnerability(VulnerabilityCode.SESSION_HIJACK);
end

rule "SC:_Check_process"
	agenda-group "sc_check_primary"
    when
        DiagramPattern(element instanceof Process)                    
    then
        drools.setFocus("sc_process");
end

rule "SC:_Check_external_browser"
	agenda-group "sc_check_primary"
    when
        pattern : DiagramPattern(element instanceof Browser)                             
    then
        pattern.addVulnerability(VulnerabilityCode.XSS);	// pretpostavimo da XSS postoji svaki put kada podaci idu ka Ext.Ent.
        drools.setFocus("sc_external");
end

rule "SC:_Check_external"
	agenda-group "sc_check_primary"
    when
        pattern : DiagramPattern(element instanceof ExternalEntity)                    
    then
        drools.setFocus("sc_external");
end


rule "SC:_Check_datastore"
	agenda-group "sc_check_primary"
    when
        DiagramPattern(element instanceof DataStore)                    
    then
        drools.setFocus("sc_datastore");
end


rule "SC_External:_Process_XSS"
	agenda-group "sc_external"
    when
        pattern : DiagramPattern(traceStart instanceof Process)      
     	DiagramPattern($list : trace)
     	elementInTrace : Element() from $list
     	Boolean(booleanValue == true) from elementInTrace instanceof Process  
     	Boolean(booleanValue == true) from ((Process)elementInTrace).sanitizeOutput == false
    then
        pattern.removeVulnerability(VulnerabilityCode.XSS);
end


rule "SC_Datastore:_Encrypted"	// ako podaci nisu enkriptovani, moguce je videti kredencijale
	agenda-group "sc_datastore"	// takodje je moguce pomocu njih iyvrsiti prijavu i ukrasti sesiju
    when    
     	pattern : DiagramPattern($list : assets)  
     	$value : AssetDefinition() from $list  
     	Boolean(booleanValue == true) from $value.protectConfidentiality == true  
     	            
		Boolean(booleanValue == true) from ((DataStore)pattern.element).dataIsEncrypted == false
		Boolean(booleanValue == true) from ((DataStore)pattern.element).storeCredentials == false
    then
        pattern.addVulnerability(VulnerabilityCode.SENSITIVE_DATA_EXPOSURE);
        pattern.addVulnerability(VulnerabilityCode.SESSION_HIJACK);
end


rule "SC_Process:_Session_Timeout1"	// ako se sesija ne tajmautuje, moguce je pogoditi njen ID pa ga iskoristiti
	agenda-group "sc_process"
    when
     	pattern : DiagramPattern()
		Boolean(booleanValue == true) from ((Process)pattern.element).sessionHasTimeouts == false
    then
        pattern.addVulnerability(VulnerabilityCode.SESSION_HIJACK);
end


